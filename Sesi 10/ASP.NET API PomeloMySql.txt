WEB API ASP.NET CORE CLI Pomelo mysql

1.  dotnet new webapi -n "Movies" -lang "C#" -au none
2.  dotnet add package Pomelo.EntityFrameworkCore.MySql 
3. dotnet add package Microsoft.EntityFrameworkCore.Tools
4. dotnet ef migrations add "Initial Migrations"
5. tambahkan di startup.cs
	
using Pomelo.EntityFrameworkCore.MySql.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Movies.Data;
            services.AddDbContextPool<ApiDbContext>(
               options => options.UseMySql("Server=localhost;port=3306;Database=db_movie;Uid=root;Pwd=root;SslMode=none",new MySqlServerVersion(new Version(8, 0, 11))));
            services.AddMvc();
6. tambahkan di appsettingjson.json

  
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;port=3306;Database=db_movie;Uid=root;Pwd=root;SslMode=none"
  },

7. ApiDbContext.cs
using Microsoft.EntityFrameworkCore;
using Movies.Models;

namespace Movies.Data
{
    public class ApiDbContext : DbContext
    {
        public virtual DbSet<ItemData> tb_movie {get;set;}
            public ApiDbContext(DbContextOptions<ApiDbContext> options) 
                : base(options)
            {

            }
        
    }
}

8. ItemData.cs
using System;
namespace Movies.Models
{
    public class ItemData
    {
        public int id{get;set;}
        public string name{get;set;}
        public string genre{get;set;}
        public string duration{get;set;}
        public DateTime releaseDate{get;set;}
        
    }
}

9. MoviesController.cs
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Movies.Data;
using Movies.Models;

namespace Movies.Controllers
{
    [Route("api/[controller]")] 
    [ApiController]
    public class MoviesController : ControllerBase
    {
        private readonly ApiDbContext _context;

        public MoviesController(ApiDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> GetItems()
        {
            var items = await _context.tb_movie.ToListAsync();
            return Ok(items);
        }

        [HttpPost]
        public async Task<IActionResult> CreateItem(ItemData data)
        {
            if(ModelState.IsValid)
            {
                await _context.tb_movie.AddAsync(data);
                await _context.SaveChangesAsync();

                return CreatedAtAction("GetItem", new {data.id}, data);
            }

            return new JsonResult("Something went wrong") {StatusCode = 500};
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetItem(int id)
        {
            var item = await _context.tb_movie.FirstOrDefaultAsync(x => x.id == id);

            if(item == null)
            {
                return NotFound();
            }
            
            return Ok(item);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateItem(int id, ItemData item)
        {
            if(id != item.id){
                return BadRequest();
            }

            var existItem = await _context.tb_movie.FirstOrDefaultAsync(x => x.id == id);
            
            if(existItem == null)
            {
                return NotFound();
            }

            existItem.name = item.name;
            existItem.genre = item.genre;
            existItem.duration = item.duration;
            existItem.releaseDate = item.releaseDate;

            await _context.SaveChangesAsync();

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteItem(int id)
        {
            var existItem = await _context.tb_movie.FirstOrDefaultAsync(x => x.id == id);

            if(existItem == null)
            {
                return NotFound();
            }

            _context.tb_movie.Remove(existItem);
            await _context.SaveChangesAsync();

            return Ok(existItem);
        }
    }
}

10. dotnet run

